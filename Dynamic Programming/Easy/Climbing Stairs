https://leetcode.com/problems/climbing-stairs/

APPROACH 1 : ITERATIVE DP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        dp[0] = 1;
        dp[1] = 1;

        for(int i=2; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};

APPROACH 2 : RECURSIVE DP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int helper(int n, vector<int>& dp){
        if(dp[n] != -1) return dp[n];
        dp[n] = helper(n-1,dp) + helper(n-2,dp);
        return dp[n];
    }

    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        dp[0] = 1;
        dp[1] = 1;
        return helper(n, dp);
    }
};
