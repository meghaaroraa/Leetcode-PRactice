https://leetcode.com/problems/wiggle-subsequence/

APPROACH 1 : 
TIME COMPLEXITY = O(N!)
SPACE COMPLEXITY = O(N)
* GIVES TLE *

class Solution {
public:
    int helper(vector<int>& nums, int idx, bool inc){
        int ans = 0;

        for(int i=idx+1; i<nums.size(); i++){
            if((inc && nums[i] > nums[idx]) || (!inc && nums[i] < nums[idx])){
                ans = max(ans, helper(nums, i, !inc)+1);
            }
        }
        return ans;
    }

    int wiggleMaxLength(vector<int>& nums) {
        int n = nums.size();
        if(n < 2) return n;

        return 1 + max(helper(nums, 0, true), helper(nums, 0, false));
    }
};

APPROACH 2 :
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int n = nums.size();
        if(n < 2) return n;

        vector<int> inc(n);
        vector<int> dec(n);
        inc[0] = dec[0] = 1;

        for(int i=1; i<n; i++){
            if(nums[i] > nums[i-1]){
                inc[i] = dec[i-1] + 1;
                dec[i] = dec[i-1];
            }

            else if(nums[i] < nums[i-1]){
                inc[i] = inc[i-1];
                dec[i] = inc[i-1] + 1;
            }

            else{
                inc[i] = inc[i-1];
                dec[i] = dec[i-1];
            }
        }

        return max(inc[n-1], dec[n-1]);
    }
};
