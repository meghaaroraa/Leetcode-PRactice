https://leetcode.com/problems/combination-sum-iv/

APPROACH 1 : RECURSION
TIME COMPLEXITY = O(N*N)
SPACE COMPLEXITY = O(1)
* GIVES TLE *

class Solution {
public:
    int helper(vector<int>& nums, int target){
        if(target == 0) return 1;

        int cnt = 0;
        for(int i=0; i<nums.size(); i++){
            if(target - nums[i] >= 0)
                cnt += helper(nums, target-nums[i]);
        }
        return cnt;
    }

    int combinationSum4(vector<int>& nums, int target) {
        return helper(nums, target);
    }
};

APPROACH 2 : DYNAMIC PROGRAMMING
TIME COMPLEXITY = O(N*N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int helper(vector<int>& nums, int target, vector<int>& dp){
        if(target == 0) return 1;
        if(dp[target] != -1) return dp[target];

        int cnt = 0;
        for(int i=0; i<nums.size(); i++){
            if(target - nums[i] >= 0)
                cnt += helper(nums, target-nums[i], dp);
        }

        return dp[target] = cnt;
    }

    int combinationSum4(vector<int>& nums, int target) {
        vector<int> dp(target+1, -1);
        return helper(nums, target, dp);
    }
};
