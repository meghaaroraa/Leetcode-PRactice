https://leetcode.com/problems/delete-and-earn/

APPROACH 1: RECURSIVE DYNAMIC PROGRAMMING
TIME COMPLEXITY = O(NLogN)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int helper(vector<int>& nums, int n, vector<int>& dp){
        if(n<0) return 0;

        int currVal = nums[n];
        int currSum = nums[n];
        int i = n-1;

        if(dp[n] != -1) return dp[n];

        while(i>=0 && nums[i] == currVal){
            currSum += nums[n];
            i--;
        }

        while(i>=0 && nums[i] == currVal-1) i--;

        dp[n] = max(currSum + helper(nums, i, dp), helper(nums, n-1, dp));
        return dp[n];
    }

    int deleteAndEarn(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();

        vector<int> dp(n+1, -1);
        return helper(nums, n-1, dp);
    }
};

APPROACH 2: ITERATIVE PROGRAMMING
TIME COMPLEXITY = O(NLogN)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int deleteAndEarn(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int N = int(nums.back());

        vector<int> sum(N + 1);
        for (auto x : nums) sum[x] += x;

        int cost1 = 0;
        int cost2 = sum[1];

        for (int i = 2; i <= N; i++) {
            int cost = max(cost2, cost1 + sum[i]);
            cost1 = cost2;
            cost2 = cost;
        }
        return cost2;
    }
};
