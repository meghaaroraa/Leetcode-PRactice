https://leetcode.com/problems/unique-binary-search-trees-ii/

APPROACH : RECURSION
TIME COMPLEXITY = O(4^N)
SPACE COMPLEXITY = O(4^N)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> helper(int st, int end, map<pair<int,int>, vector<TreeNode*>>& dp){
        vector<TreeNode*> ans;
        if(st > end){
            ans.push_back(NULL);
            return ans;
        }

        if(dp.find(make_pair(st, end)) != dp.end()) return dp[make_pair(st,end)];

        for(int i=st; i<=end; i++){
            vector<TreeNode*> left = helper(st, i-1, dp);
            vector<TreeNode*> right = helper(i+1, end, dp);

            for(auto l : left){
                for(auto r : right){
                    TreeNode* root = new TreeNode(i, l, r);
                    ans.push_back(root);
                }
            }
        }
        return dp[make_pair(st, end)] = ans;
    }

    vector<TreeNode*> generateTrees(int n) {
        map<pair<int,int>, vector<TreeNode*>> dp;
        return helper(1, n, dp);
    }
};
