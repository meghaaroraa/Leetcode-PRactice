https://leetcode.com/problems/range-sum-query-2d-immutable/

APPROACH 1 : BRUTE FORCE
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N^2)
* GIVES TLE * 

class NumMatrix {
public:
    vector<vector<int>> grid;
    NumMatrix(vector<vector<int>>& matrix) {
        grid = matrix;
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        int sum = 0;

        for(int i=row1; i<=row2; i++){
            for(int j=col1; j<=col2; j++){
                sum += grid[i][j];
            }
        }
        return sum;
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */

APPROACH 2 : DYNAMIC PROGRAMMING
TIME COMPLEXITY = O
SPACE COMPLEXITY = O(N^2)

class NumMatrix {
private:
    vector<vector<int>> grid;
public:
    NumMatrix(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        if(n == 0 || m == 0) return;
        grid.resize(n + 1, vector<int>(m + 1, 0));
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                grid[i+1][j+1] = grid[i+1][j] + grid[i][j+1] + matrix[i][j] - grid[i][j];
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return grid[row2+1][col2+1] - grid[row1][col2+1] - grid[row2+1][col1] + grid[row1][col1];
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
