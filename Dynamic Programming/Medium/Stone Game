https://leetcode.com/problems/stone-game/

APPROACH 1 : DYNAMIC PROGRAMMING
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N^2)

class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        vector<vector<int>> dp(n+2, vector<int>(n+2, 0));

        for(int size=1; size<=n; size++){
            for(int i=0, j=size-1; j<n; i++, j++){
                int parity = (j+i+n) % 2;

                if(parity == 1) 
                    dp[i+1][j+1] = max(piles[i] + dp[i+2][j+1], piles[j] + dp[i+1][j]);
                
                else{
                    dp[i+1][j+1] = min(-piles[i] + dp[i+2][j+1], -piles[j] + dp[i+1][j]);
                }
            }
        }
        return dp[1][n] > 0;
    }
};

APPROACH 2 : TWO POINTERS
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    bool stoneGame(vector<int>& arr) {
        int i = 0;
        int j = arr.size() - 1;

        int sumA = 0;
        int sumB = 0;
        int parity = 1;

        while(i < j){
            if(parity % 2){
                if(arr[i] >= arr[j]){
                    sumA += arr[i];
                    i++;
                }

                else{
                    sumA += arr[j];
                    j--;
                }
            }

            else{
                if(arr[i] >= arr[j]){
                    sumB += arr[j];
                    j--;
                }

                else{
                    sumB += arr[i];
                    i++;
                }
            }
            parity++;
        }
        return sumA > sumB;
    }
};
