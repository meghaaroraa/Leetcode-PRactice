https://leetcode.com/problems/minimum-falling-path-sum/

APPROACH : TOP DOWN DP
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N^2)


class Solution {
public:
    int helper(vector<vector<int>>& matrix, int row, int col, vector<vector<int>>& dp, int n){
        if(col < 0 || col >= n) return INT_MAX;
        if(row == n-1) return matrix[row][col];
        if(dp[row][col] != INT_MAX) return dp[row][col];

        int downLeft = helper(matrix, row+1, col-1, dp, n);
        int down = helper(matrix, row+1, col, dp, n);
        int downRight = helper(matrix, row+1, col+1, dp, n);

        dp[row][col] = matrix[row][col] + min(downLeft, min(down, downRight));
        return dp[row][col];
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int ans = INT_MAX;
        vector<vector<int>> dp(n, vector<int> (n, INT_MAX));

        for(int i=0; i<n; i++){
            ans = min(ans, helper(matrix, 0, i, dp, n));
        }
        return ans;
    }
};
