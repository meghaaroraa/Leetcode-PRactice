https://leetcode.com/problems/letter-combinations-of-a-phone-number/

APPROACH : BACKTRACKING
TIME COMPLEXITY = O(2^N)
SPACE COMPLEXITY = O(N)

class Solution {
public:

    void helper(string digits, int i, vector<string>& key, string& temp, vector<string>& ans){
        if(i == digits.length()){
            ans.push_back(temp);
            return;
        }

        int d = digits[i] - '0';
        for(int j=0; j<key[d].length(); j++){
            temp.push_back(key[d][j]);
            helper(digits,i+1,key,temp,ans);
            temp.pop_back();
        }
    }

    vector<string> letterCombinations(string digits) {
        if(digits.length() == 0) return {};
        
        vector<string> key = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        string temp = "";
        vector<string> ans;

        helper(digits, 0, key, temp, ans);
        return ans;
    }
};
