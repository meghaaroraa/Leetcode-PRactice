https://leetcode.com/problems/n-queens/

APPROACH : BACKTRACKING
TIME COMPLEXITY = O(N!)
SPACE COMPLEXITY = O(N!)

class Solution {
public:
    bool isValid(vector<string>& temp, int row, int col){
        int n = temp.size();

        for(int i=0; i<row; i++){
            if(temp[i][col] == 'Q') return false;
        }

        for(int i=row-1, j=col-1; i>=0 && j>=0; i--, j--){
            if(temp[i][j] == 'Q') return false;
        }

        for(int i=row-1, j=col+1; i>=0 && j<n; i--, j++){
            if(temp[i][j] == 'Q') return false;
        }
        return true;
    }

    void helper(vector<string>& temp, int i, vector<vector<string>>& ans){
        if(i == temp.size()){
            ans.push_back(temp);
            return;
        }

        for(int j=0; j<temp.size(); j++){
            if(isValid(temp, i, j)){
                temp[i][j] = 'Q';
                helper(temp, i+1, ans);
                temp[i][j] = '.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> temp(n, string(n, '.'));
        helper(temp, 0, ans);
        return ans;
    }
};
