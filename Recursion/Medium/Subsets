https://leetcode.com/problems/subsets/

APPROACH 1 : BACKTRACKING
TIME COMPLEXITY = O(2^N)
SPACE COMPLEXITY = O(N)

class Solution {
public:

    void helper(vector<vector<int>>& ans, vector<int>& temp, vector<int>& nums, int idx){
        ans.push_back(temp);

        for(int i=idx; i<nums.size(); i++){
            temp.push_back(nums[i]);
            helper(ans, temp, nums, i+1);
            temp.pop_back();
        }
    }

    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> temp;

        helper(ans, temp, nums, 0);
        return ans;
    }
};

APPROACH 2 : BACKTRACKING 2
TIME COMPLEXITY = O(2^N)
SPACE COMPLEXITY = O(N)

class Solution {
public:

    void helper(vector<vector<int>>& ans, vector<int>& temp, vector<int>& nums, int i){
        if(i==nums.size()){
            ans.push_back(temp);
            return;
        }

        temp.push_back(nums[i]);
        helper(ans, temp, nums, i+1);
        temp.pop_back();
        helper(ans, temp, nums, i+1);
    }

    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> temp;

        helper(ans, temp, nums, 0);
        return ans;
    }
};
