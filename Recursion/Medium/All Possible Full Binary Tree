https://leetcode.com/problems/all-possible-full-binary-trees/

APPROACH : DYNAMIC PROGRAMMING
TIME COMPLEXITY = O(2 ^ n/2)
SPACE COMPLEXITY = O(n * 2 ^ n/2)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> allPossibleFBT(int n) {
        unordered_map<int, vector<TreeNode*>> dp;

        if(n%2 == 0) return {};
        if(n==1) return {new TreeNode()};

        if(dp.find(n) != dp.end()) return dp[n];

        vector<TreeNode*> res;

        for(int i=1; i<n; i+=2){
            vector<TreeNode*> left = allPossibleFBT(i);
            vector<TreeNode*> right = allPossibleFBT(n-i-1);

            for(auto l : left){
                for(auto r : right){
                    TreeNode* root = new TreeNode();
                    root->left=l;
                    root->right=r;
                    res.push_back(root);
                }
            }
        }
        return dp[n] = res;
    }
};
