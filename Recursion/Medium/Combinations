https://leetcode.com/problems/combinations/

APPROACH : BACKTRACKING
TIME COMPLEXITY = O(n! / (k−1)! * (n−k)!)
SPACE COMPLEXITY = O(K)

class Solution {
public:

    void helper(vector<int>& curr, int first, vector<vector<int>>& ans, int k, int n){
        if(k == curr.size()){
            ans.push_back(curr);
            return;
        }

        int need = k - curr.size();
        int remain = n - first + 1;
        int available = remain - need;

        for(int num = first; num<=first+available; num++){
            curr.push_back(num);
            helper(curr, num+1, ans, k, n);
            curr.pop_back();
        }
    }

    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> ans;
        vector<int> curr;

        helper(curr, 1, ans, k, n);
        return ans;
    }
};
