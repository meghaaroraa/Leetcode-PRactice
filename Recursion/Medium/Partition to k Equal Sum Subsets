https://leetcode.com/problems/partition-to-k-equal-sum-subsets/

APPROACH 1 : BACKTRACKING
TIME COMPLEXITY = O(NLogN + 2^N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum % k != 0) return false;

        sort(nums.rbegin(), nums.rend());
        vector<bool> visited(nums.size(), false);
        return solve(nums, visited, k, 0, 0, sum / k);
    }

private:
    bool solve(vector<int>& nums, vector<bool>& visited, int k, int startIdx, int currSum, int target) {
        if (k == 1) return true;
        if (currSum > target) return false;
        if (currSum == target) {
            return solve(nums, visited, k-1, 0, 0, target);
        }

        for (int i = startIdx; i < nums.size(); i++) {
            if (visited[i]) continue;
            if (nums[i] > target) return false; // Case: [6, 4]; k = 2

            visited[i] = true;
            if (solve(nums, visited, k, i + 1, currSum + nums[i], target)) return true;
            visited[i] = false;
        }

        return false;
    }
};

APPROACH 2 : DYNAMIC PROGRAMMING
TIME COMPLEXITY = O(2^N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    bool helper(int index,vector<int> &nums,vector<int> &dp, int k, int target, int sum){
        if(k == 1)return true;
        
        if(sum == target){
            return helper(0,nums,dp,k-1,target,0);
        }
        for(int i = index; i<nums.size(); i++){
            if(dp[i]!=1 && sum + nums[i] <= target){
                dp[i] = 1;
                if(helper(i+1,nums,dp,k,target,sum+nums[i])) return true;
                
                dp[i] = 0;
                if(sum == 0) return false;
            }
        }
        return false;
    }
    
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum = accumulate(nums.begin(),nums.end(),0);
        
        if(k > nums.size() || sum%k!=0)return false;
        
        vector<int> dp(nums.size(),-1);
        return helper(0,nums,dp,k,sum/k,0);
    }
};
