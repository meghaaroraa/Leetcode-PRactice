https://leetcode.com/problems/generate-parentheses/

APPROACH : BACKTRACKING
TIME COMPLEXITY = O(2^N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    void helper(int i, int j, int n, vector<string>& ans, string& temp){
        if(i == n && j == n){
            ans.push_back(temp);
            return;
        }

        if(i != n && j != n){
            temp += '(';
            helper(i+1, j, n, ans, temp);
            temp.pop_back();
        }

        if(i > j){
            temp += ')';
            helper(i, j+1, n, ans, temp);
            temp.pop_back();
        }
    }

    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string temp;
        helper(0, 0, n, ans, temp);
        return ans;
    }
};
