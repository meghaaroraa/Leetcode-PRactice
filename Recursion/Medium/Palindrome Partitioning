https://leetcode.com/problems/palindrome-partitioning/

APPROACH 1 : RECURSION
TIME COMPLEXITY = O(N * 2^N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    bool palindrome(string s, int i, int j){
        while(i <= j){
            if(s[i] != s[j]) return false;
            i++;
            j--;
        }
        return true;
    }

    void helper(vector<vector<string>>& ans, vector<string>& temp, string s, int i){
        if(i==s.length()) ans.push_back(temp);

        for(int j=i; j<s.length(); j++){
            if(palindrome(s, i, j)){
                temp.push_back(s.substr(i, j-i+1));
                helper(ans, temp, s, j+1);
                temp.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;

        helper(ans, temp, s, 0);
        return ans;
    }
};

APPROACH 2 : BACKTRACKING
TIME COMPLEXITY = O(N * 2^N)
SPACE COMPLEXITY = O(N^2)

class Solution {
public:
    void helper(vector<vector<string>>& ans, vector<string>& temp, string& s, int i, vector<vector<bool>>& dp){
        if(i==s.length()) ans.push_back(temp);

        for(int j=i; j<s.length(); j++){
            if(s[i] == s[j] && (j-i <= 2 || dp[i+1][j-1])){
                dp[i][j] = true;
                temp.push_back(s.substr(i, j-i+1));
                helper(ans, temp, s, j+1, dp);
                temp.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;

        int n = s.length();
        vector<vector<bool>> dp(n, vector<bool>(n, false));

        helper(ans, temp, s, 0, dp);
        return ans;
    }
};
