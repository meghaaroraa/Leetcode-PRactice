https://leetcode.com/problems/distant-barcodes/

APPROACH: PRIORITY QUEUE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    vector<int> rearrangeBarcodes(vector<int>& barcodes) {
        int n = barcodes.size();
        vector<int> ans(n);

        unordered_map<int,int> mp;
        priority_queue<pair<int,int>> pq;

        for(auto i : barcodes) mp[i]++;
        for(auto i : mp) pq.push({i.second, i.first});

        int i = 0;
        while(!pq.empty()){
            int val = pq.top().second;
            int freq = pq.top().first;
            pq.pop();

            while(i < n && freq){
                ans[i] = val;
                freq--;
                i += 2;
                if(i >= n) i = 1;
            }
        }
        return ans;
    }
};
