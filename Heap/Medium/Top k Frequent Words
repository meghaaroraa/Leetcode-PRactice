https://leetcode.com/problems/top-k-frequent-words/

APPROACH: PRIORITY QUEUE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

struct compare {
    bool operator() (pair<int, string> a, pair<int, string> b) {
        if(a.first == b.first) return a.second > b.second;
        else return a.first < b.first;
    }
};

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string,int> mp;
        priority_queue<pair<int,string>, vector<pair<int,string>>, compare> pq;

        for(string word : words) mp[word]++;
        for(auto i : mp) pq.push({i.second, i.first});

        vector<string> ans;
        while(k--){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }
};
