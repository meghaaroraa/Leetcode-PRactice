https://leetcode.com/problems/cheapest-flights-within-k-stops/

APPROACH: GRAPH, BFS
TIME COMPLEXITY = O(N + EK)
SPACE COMPLEXITY = O(N + EK)

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> adj(n);
        for(auto flight : flights) adj[flight[0]].push_back({flight[1], flight[2]});

        vector<int> distance(n, INT_MAX);
        queue<pair<int,int>> q;
        q.push({src, 0});
        int stops = 0;

        while(stops <= k && !q.empty()){
            int sz = q.size();

            while(sz--){
                auto [node, dist] = q.front();
                q.pop();

                for(auto [neighbor, cost] : adj[node]){
                    if(cost + dist >= distance[neighbor]) continue;
                    else{
                        distance[neighbor] = cost + dist;
                        q.push({neighbor, distance[neighbor]});
                    }
                }
            }
            stops++;
        }
        if(distance[dst] == INT_MAX) return -1;
        else return distance[dst];
    }
};
