https://leetcode.com/problems/sort-characters-by-frequency/

APPROACH: PRIORITY QUEUE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    string frequencySort(string s) {
        int n = s.length();
        unordered_map<int, int> mp;

        for(int i=0; i<n; i++) mp[s[i]]++;

        priority_queue<pair<int, char>> pq;
        for(auto i : mp) pq.push({i.second, i.first});

        string ans = "";
        while(!pq.empty()){
            int ch = pq.top().second;
            int freq = pq.top().first;

            while(freq--) ans.push_back(ch);
            pq.pop();
        }
        return ans;
    }
};
