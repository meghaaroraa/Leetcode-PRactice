https://leetcode.com/problems/k-closest-points-to-origin/

APPROACH: PRIORITY QUEUE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(K)

class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int, vector<int>>> pq;
        for(auto point : points){
            int dis = pow(point[0],2) + pow(point[1],2);
            pq.push({dis,point});
            if(pq.size() > k) pq.pop();
        }

        vector<vector<int>> ans;
        while(!pq.empty()){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }
};
