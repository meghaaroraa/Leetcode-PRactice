https://leetcode.com/problems/top-k-frequent-elements/

APPROACH: PRIORITY QUEUE, MAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        for(auto num : nums) mp[num]++;

        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        for(auto i : mp){
            pq.push({i.second, i.first});
            if(pq.size() > k) pq.pop();
        }

        vector<int> ans;
        while(!pq.empty()){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }
};
