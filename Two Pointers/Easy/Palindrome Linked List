https://leetcode.com/problems/palindrome-linked-list/

APPROACH : MIDDLE, REVERSE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mid(ListNode* head){
        if(!head || !head->next) return head;
        ListNode* slow = head;
        ListNode* fast = head;

        while(fast->next && fast->next->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    ListNode* reverse(ListNode* head){
        if(!head || !head->next) return head;
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* nxt = NULL;

        while(curr){
            nxt = curr->next;
            curr->next = prev; 
            prev = curr;
            curr = nxt;
        }
        return prev;       
    }

    bool isPalindrome(ListNode* head) {
        ListNode* m = mid(head);
        ListNode* l1 = head;
        ListNode* l2 = m->next;
        m->next = NULL;
        l2 = reverse(l2);
        
        while(l1 && l2){
            if(l1->val != l2->val) return false;
            l1 = l1->next;
            l2 = l2->next;
        }
        return true;
    }
};
