https://leetcode.com/problems/most-profit-assigning-work/

APPROACH : SORTING
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        int n = difficulty.size();
        vector<pair<int,int>> job;

        for(int i=0; i<n; i++){
            job.push_back(make_pair(difficulty[i],profit[i]));
        }

        sort(job.begin(),job.end());
        sort(worker.begin(),worker.end());

        int ans = 0;
        int i = 0;
        int maxProfit = 0;
        int m = worker.size();

        for(int j=0; j<m; j++){
            while(i<n && worker[j] >= job[i].first) maxProfit = max(maxProfit, job[i++].second);
            ans += maxProfit;
        }
        return ans;
    }
};
