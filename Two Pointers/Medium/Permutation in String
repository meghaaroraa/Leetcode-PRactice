https://leetcode.com/problems/permutation-in-string/

APPROACH 1 : HASHMAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int  n = s1.length();
        int  m = s2.length();

        unordered_map<int,int> mp;
        for(int i=0; i<n; i++) mp[s1[i]]++;

        for(int i=0; i<m-n+1; i++){
            unordered_map<int,int> mp2;
            for(int j=i; j<n+i; j++) mp2[s2[j]]++;

            if(mp == mp2) return true;
        }
        return false;
    }
};

APPROACH 2 : SLIDING WINDOW
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int l1 = s1.length();
        int l2 = s2.length();
        if(l1>l2) return false;

        unordered_map<char,int> m1;
        unordered_map<char,int> m2;

        for(int i=0; i<l1; i++){
            m1[s1[i]]++;
            m2[s2[i]]++;
        }
        if(m1 == m2) return true;
        int k=0;

        for(int i=l1; i<l2; i++){
            if(m2[s2[k]]==1) m2.erase(s2[k]);
            else m2[s2[k]]--;
            
            k++;
            m2[s2[i]]++;
            
            if(m1 == m2) return true;
        }
        return false;
    }
};
