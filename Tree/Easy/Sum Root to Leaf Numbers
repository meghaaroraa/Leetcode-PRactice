https://leetcode.com/problems/sum-root-to-leaf-numbers/

APPROACH: DFS
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, int& ans, int sum){
        if(!root) return;
        sum += root->val;

        if(!root->left && !root->right) ans += sum;

        if(root->left) helper(root->left, ans, sum*10);
        if(root->right) helper(root->right, ans, sum*10);
    }

    int sumNumbers(TreeNode* root) {
        int sum = 0;
        int ans = 0;
        helper(root, ans, sum);
        return ans;
    }
};
