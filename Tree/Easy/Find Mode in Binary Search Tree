https://leetcode.com/problems/find-mode-in-binary-search-tree/

APPROACH: UNORDERED_MAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, unordered_map<int,int>& mp){
        if(!root) return;
        mp[root->val]++;

        helper(root->left, mp);
        helper(root->right, mp);
        return;
    }

    vector<int> findMode(TreeNode* root) {
        unordered_map<int,int> mp;
        helper(root, mp);

        vector<int> ans;
        int maxFreq = INT_MIN;

        for(auto i : mp) maxFreq = max(maxFreq, i.second);
        for(auto i : mp){
            if(i.second == maxFreq) ans.push_back(i.first);
        }
        return ans;
    }
};
