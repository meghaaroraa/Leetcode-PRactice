https://leetcode.com/problems/cousins-in-binary-tree/

APPROACH: RECURSION
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height(TreeNode* root, int x, int lvl){
        if(!root) return INT_MIN;
        if(root->val == x) return lvl;
        return max(height(root->left, x, lvl+1), height(root->right, x, lvl+1));
    }

    int parent(TreeNode* root, int x, TreeNode* p){
        if(!root) return INT_MIN;
        if(root->val == x) return p->val;
        return max(parent(root->left, x, root), parent(root->right, x, root));
    }

    bool isCousins(TreeNode* root, int x, int y) {
        return (height(root, x, 0) == height(root, y, 0) &&
                parent(root, x, NULL) != parent(root, y, NULL));
    }
};
