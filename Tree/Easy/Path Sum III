https://leetcode.com/problems/path-sum-iii/

APPROACH: DFS
TIME COMPLEXITY = O(N*N)
SPACE COMPLEXITY = O(LogN)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int cnt = 0;

    void helper(TreeNode* root, long long int sum, int targetSum){
        if(!root) return;

        sum += root->val;
        if(sum == targetSum) cnt++;

        helper(root->left, sum, targetSum);
        helper(root->right, sum, targetSum);
    }

    void dfs(TreeNode* root, int targetSum){
        if(!root) return;
        helper(root, 0, targetSum);

        dfs(root->left, targetSum);
        dfs(root->right, targetSum);
    }

    int pathSum(TreeNode* root, int targetSum) {
        dfs(root, targetSum);
        return cnt;
    }
};
