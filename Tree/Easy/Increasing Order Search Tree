https://leetcode.com/problems/increasing-order-search-tree/

APPROACH: INORDER TRAVERSAL
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& in){
        if(!root) return;
        inorder(root->left, in);
        in.push_back(root->val);
        inorder(root->right, in);
    }

    TreeNode* increasingBST(TreeNode* root) {
        vector<int> in;
        inorder(root, in);

        TreeNode* ans = new TreeNode(0);
        TreeNode* temp = ans;

        for(auto i : in){
            TreeNode* t = new TreeNode(i);
            temp->right = t;
            temp = temp->right;
        }
        return ans->right;
    }
};
