https://leetcode.com/problems/univalued-binary-tree/

APPROACH 1: USING SET
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, set<int>& s){
        if(!root) return;
        s.insert(root->val);

        helper(root->left, s);
        helper(root->right, s);
    }

    bool isUnivalTree(TreeNode* root) {
        set<int> s;
        helper(root, s);

        return s.size() == 1;
    }
};

APPROACH 2: RECURSION
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, int val, bool& ans){
        if(!root) return;
        if(root->val != val) ans = false;
        
        helper(root->left, val, ans);
        helper(root->right, val, ans);
    }

    bool isUnivalTree(TreeNode* root) {
        int val = root->val;
        bool ans = true;

        helper(root, val, ans);
        return ans;
    }
};
