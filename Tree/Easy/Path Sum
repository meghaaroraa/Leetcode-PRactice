https://leetcode.com/problems/path-sum/

APPROACH: RECURSION
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY O(LogN)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool helper(TreeNode* root, int targetSum, int sum){
        if(!root->left && !root->right){
            sum += root->val;
            if(targetSum == sum) return true;
            return false;
        }

        sum += root->val;
        bool ans1 = false;
        bool ans2 = false;
        
        if(root->left) ans1 = helper(root->left,targetSum,sum);
        if(root->right) ans2 = helper(root->right,targetSum,sum);
        return ans1 || ans2;
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(!root) return false;
        return helper(root, targetSum, 0);
    }
};
