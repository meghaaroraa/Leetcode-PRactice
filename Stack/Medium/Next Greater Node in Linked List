https://leetcode.com/problems/next-greater-node-in-linked-list/

APPROACH 1: LINKED LIST
TIME COMPLEXITY = O(N!)
SPACE COMPLEXITY = O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        vector<int> ans;

        while(head){
            ListNode* temp = head->next;
            int res = 0;

            while(temp){
                if(temp->val > head->val){
                    res = max(res,temp->val);
                    break;
                }
                temp = temp->next;
            }

            ans.push_back(res);
            head = head->next;
        }
        return ans;
    }
};

APPRAOCH 2: STACK
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        vector<int> v;
        while(head){
            v.push_back(head->val);
            head=head->next;
        }

        int n = v.size();
        vector<int> ans(n,0);
        stack<int> st;

        for(int i=0; i<n; i++){
            while(!st.empty() && v[i]>v[st.top()]){
                ans[st.top()] = v[i];
                st.pop();
            }
            st.push(i);
        }
        return ans;
    }
};
