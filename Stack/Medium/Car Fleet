https://leetcode.com/problems/car-fleet/

APPROACH: 
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
        stack<double> st;
        int n = position.size();
        
        vector<pair<int,int>> vec(n);
        for(int i=0; i<n; i++) vec[i] = {position[i],speed[i]};
        sort(vec.begin(), vec.end());

        for(int i=0; i<n; i++){
            auto [pos, speed] = vec[i];
            double time = (double)(target - pos) / speed;

            while(!st.empty() && st.top() <= time) st.pop();
            st.push(time);
        }
        return st.size();
    }
};
