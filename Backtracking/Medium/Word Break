https://leetcode.com/problems/word-break/

APPRAOCH 1 : DFS
TIME COMPLEXITY = O(N^3)
SPACE COMPLEXITY = O(N+M)

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> words(wordDict.begin(), wordDict.end());
        queue<int> q;
        vector<bool> seen (s.length(), false);
        q.push(0);

        while(!q.empty()){
            int st = q.front();
            q.pop();

            if(st == s.length()) return true;

            for(int end = st+1; end<=s.length(); end++){
                if(seen[end]) continue;

                if(words.find(s.substr(st, end-st)) != words.end()){
                    q.push(end);
                    seen[end] = true;
                }
            }
        }
        return false;
    }
};

APPROACH 2 : DP
TIME COMPLEXITY = O(N^3)
SPACE COMPLEXITY  = O(N+M)

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.length();
        vector<bool> dp(n, false);
        dp[0] = true;

        for(int i=0; i<=n; i++){
            for(auto str : wordDict){
                if(dp[i] && s.substr(i, str.size()).compare(str) == 0){
                    dp[i+str.size()] = true;
                }
            }
        }
        return dp[n];
    }
};

/*
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<bool>dp(s.size(),false);
        dp[0]=true;
        
        for(int i = 0; i <= s.size(); i++)
        {
            for(auto str: wordDict)
            {
                if(dp[i])
                {
                    if(s.substr(i,str.size()).compare(str)==0)
                    {
                        dp[i+str.size()]=true;
                    }
                }
            }
        }return dp[s.size()];
        
    }
};
*/
