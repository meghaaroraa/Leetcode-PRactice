https://leetcode.com/problems/search-a-2d-matrix/

APPROACH 1 : LINEAR SEARCH
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(matrix[i][j] == target) return true;
            }
        }
        return false;
    }
};

APPROACH 2 : BINARY SEARCH
TIME COMPLEXITY = 0(Log(N*M))
SPACE COMPLEXITY = O(1)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();

        int row = 0;
        int col = m-1;

        while(row<n && col>=0){
            if(matrix[row][col] == target) return true;
            else if(matrix[row][col] < target) row++;
            else col--;
        }
        return false;
    }
};
