https://leetcode.com/problems/minimum-path-sum/

APPROACH : DYNAMIC PROGRAMMING
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N^2)

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>> ans(n, vector<int> (m));
        ans[0][0] = grid[0][0];

        for(int i=1; i<n; i++) ans[i][0] = grid[i][0] + ans[i-1][0];
        for(int i=1; i<m; i++) ans[0][i] = grid[0][i] + ans[0][i-1];

        for(int i=1; i<n; i++){
            for(int j=1; j<m; j++){
                ans[i][j] = min(ans[i-1][j],ans[i][j-1]) + grid[i][j];
            }
        }

        return ans[n-1][m-1];
    }
};
