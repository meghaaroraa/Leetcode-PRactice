https://leetcode.com/problems/3sum-closest/

APPROACH : POINTERS
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N^2)

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        int absDiff = INT_MAX;
        int sum = 0;
        sort(nums.begin(),nums.end());
        
        for(int i=0; i<n; i++){
            int st = i+1;
            int end = n-1;

            while(st < end){
                int currSum = nums[i] + nums[st] + nums[end];
                int currDiff = abs(target - currSum);

                if(currDiff <= absDiff){
                    absDiff = currDiff;
                    sum = currSum;
                }

                if(currSum < target) st++;
                else end--;
            }
        }
        return sum;
    }
};
