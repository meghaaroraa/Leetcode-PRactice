https://leetcode.com/problems/3sum/

APPROACH : TWO POINTERS
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N^2)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        int n = nums.size();

        for(int i=0; i<n; i++){
            if(i==0 || nums[i] != nums[i-1]){
                int st = i+1;
                int end = n-1;
                int target = 0 - nums[i];

                while(st < end){
                    if(nums[st] + nums[end] == target){
                        ans.push_back({nums[i],nums[st],nums[end]});
                        while(st<end && nums[st] == nums[st+1]) st++;
                        while(st<end && nums[end] == nums[end-1]) end--;
                        st++;
                        end--;
                    }

                    else if(nums[st] + nums[end] < target) st++;
                    else end--;
                }
            }
        }
        return ans;
    }
};
