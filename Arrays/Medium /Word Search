https://leetcode.com/problems/word-search/

APPRAOCH : DFS
TIME COMPLEXITY = O(N^4)
SPACE COMPLEXITY = O(N)

class Solution {
public:

    bool helper(vector<vector<char>>& board, string word, int i, int j, int idx){
        if(idx == word.length()) return true;
        if(i<0 || i>=board.size() || j<0 || j>=board[0].size() || board[i][j] != word[idx]) return false;

        char temp = board[i][j];
        board[i][j] = '@';

        bool chk = (helper(board,word,i-1,j,idx+1) || 
                    helper(board,word,i,j+1,idx+1) || 
                    helper(board,word,i+1,j,idx+1) || 
                    helper(board,word,i,j-1,idx+1));

        board[i][j] = temp;
        return chk;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(helper(board,word,i,j,0)) return true;
            }
        }
        return false;
    }
};
