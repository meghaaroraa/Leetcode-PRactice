https://leetcode.com/problems/triangle/

APPROACH 1 : TOP DOWN DP
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N^2)

class Solution {
public:

    int helper(int i, int j, vector<vector<int>>& triangle, int n, vector<vector<int>>& dp){
        if(i==n-1) return triangle[i][j];
        if(dp[i][j] != -1) return dp[i][j];

        int down = helper(i+1,j,triangle,n,dp);
        int downright = helper(i+1,j+1,triangle,n,dp);

        return dp[i][j] = triangle[i][j] + min(down,downright);
    }

    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n, vector<int>(n,-1));
        return helper(0,0,triangle,n,dp);
    }
};

APPROACH 2 : BOTTOM UP DP
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N^2)

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));

        for(int i=0; i<n; i++) dp[n-1][i] = triangle[n-1][i];

        for(int i=n-2; i>=0; i--){
            for(int j=i; j>=0; j--){
                int down = triangle[i][j] + dp[i+1][j];
                int downright = triangle[i][j] + dp[i+1][j+1];
                dp[i][j] = min(down,downright);
            }
        }
        return dp[0][0];
    }
};
