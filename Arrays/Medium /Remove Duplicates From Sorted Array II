https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/

APPROACH 1 : HASHMAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int idx = 0;
        unordered_map<int,int> mp;

        for(auto x : nums){
            mp[x]++;
            if(mp[x] < 3) nums[idx++] = x;
        }
        return idx;
    }
};


APPROACH : TWO POINTERS
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n = nums.size();
        if(n<3) return n;
        
        int i = 1;
        int j = 2;
        
        while(j<n){
            if(nums[i]==nums[j] && nums[i-1]==nums[j]) j++;
            
            else{
                i++;
                nums[i] = nums[j];
                j++;
            }
        }
        return i+1;
    }
};
