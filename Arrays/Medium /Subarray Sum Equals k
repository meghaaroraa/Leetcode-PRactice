https://leetcode.com/problems/subarray-sum-equals-k/

APPROACH 1 : 2 LOOPS
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        int ans = 0;

        for(int i=0; i<n; i++){
            int sum = 0;
            for(int j=i; j<n; j++){
                sum += nums[j];
                if(sum == k) ans++;
            }
        }
        return ans;
    }
};

APPRAOCH 2 : UNORDERED MAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        int ans = 0;

        vector<int> prefix(n);
        prefix[0] = nums[0];

        for(int i=1; i<n; i++) prefix[i] = nums[i] + prefix[i-1];

        unordered_map<int,int> mp;

        for(int i=0; i<n; i++){
            if(prefix[i] == k) ans++;
            if(mp.find(prefix[i]-k) != mp.end()) ans += mp[prefix[i] - k];
            mp[prefix[i]]++;
        }

        return ans;
    }
};
