https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

APPROACH 1 : LINEAR SEARCH
TIME COMPLEIXTY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        int n = nums.size();
        int pos = -1;

        for(int i=0; i<n; i++){
            if(nums[i] == target && pos == -1){
                ans.push_back(i);
                pos = i;
            }
            else if(nums[i] == target) pos = i;
        }

        if(ans.size() == 0){
            ans.push_back(-1);
            ans.push_back(-1);
        }
        else ans.push_back(pos);
        return ans;
    }
};

APPROACH 2 : BINARY SEARCH
TIME COMPLEXITY = O(LogN)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int first(vector<int>& nums, int x){
        int n = nums.size();
        int lo = 0;
        int hi = n-1;

        while(lo<=hi){
            int mid = (lo+hi)/2;

            if((mid == 0 || x > nums[mid-1]) && nums[mid] == x) return mid;
            else if(nums[mid] < x) lo = mid+1;
            else hi = mid-1;
        }
        return -1;
    }
    
    int last(vector<int>& nums, int x){
        int n = nums.size();
        int lo = 0;
        int hi = n-1;

        while(lo<=hi){
            int mid = (lo+hi)/2;

            if((mid == n-1 || x < nums[mid+1]) and nums[mid] == x) return mid;
            else if(nums[mid] > x) hi = mid-1;
            else lo = mid+1;
        }
        return -1;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int a = first(nums,target);
        int b = last(nums,target);
        vector<int> ans = {a,b};
        return ans;
    }
};
