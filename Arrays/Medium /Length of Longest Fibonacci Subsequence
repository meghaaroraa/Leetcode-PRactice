https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/

APPROACH 1 : BRUTE FORCE
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int lenLongestFibSubseq(vector<int>& arr) {
        int n = arr.size();
        unordered_set<int> s(arr.begin(),arr.end());
        int ans = 0;

        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                int x = arr[j];
                int y = arr[i] + arr[j];
                int len = 2;

                while(s.find(y) != s.end()){
                    int z = x + y;
                    x = y;
                    y = z;
                    ans = max(ans, ++len);
                }
            }
        }
        return ans >= 3 ? ans : 0;
    }
};

APPROACH 2 : DYNAMIC PROGRAMMING
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int lenLongestFibSubseq(vector<int>& A) {
        int N = A.size();
        unordered_map<int, int> index;
        for (int i = 0; i < N; ++i)
            index[A[i]] = i;

        unordered_map<int, int> longest;
        int ans = 0;
        for (int k = 0; k < N; ++k)
            for (int j = 0; j < k; ++j) {
                if (A[k] - A[j] < A[j] && index.count(A[k] - A[j])) {
                    int i = index[A[k] - A[j]];
                    longest[j * N + k] = longest[i * N + j] + 1;
                    ans = max(ans, longest[j * N + k] + 2);
                }
            }

        return ans >= 3 ? ans : 0;
    }
};
