https://leetcode.com/problems/product-of-array-except-self/

APPROACH : 2 LOOPS
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N)
* GIVES TLE *

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n);

        for(int i=0; i<n; i++){
            int left = 1;
            int right = 1;
            for(int j=0; j<i; j++) left *= nums[j];
            for(int j=n-1; j>i; j--) right *= nums[j];
            ans[i] = left * right;
        }

        return ans;
    }
};

APPROACH 2 : EXTRA SPACE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n);

        vector<int> left(n);
        left[0] = 1;
        for(int i=1; i<n; i++) left[i] = left[i-1] * nums[i-1];

        vector<int> right(n);
        right[n-1] = 1;
        for(int i=n-2; i>=0; i--) right[i] = right[i+1] * nums[i+1];

        for(int i=0; i<n; i++) ans[i] = left[i] * right[i];

        return ans;
    }
};
