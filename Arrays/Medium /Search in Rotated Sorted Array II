https://leetcode.com/problems/search-in-rotated-sorted-array-ii/

APPROACH 1 : LIKE PREVIOUS QUESTION
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int i = 0;
        int j = nums.size()-1;

        while(i <= j){
            if(target > nums[i]) i++;
            else if(target < nums[j]) j--;
            else if(target == nums[i]) return true;
            else if(target == nums[j]) return true;
            else return false;
        }
        return false;
    }
};

APPROACH 2 : REMOVING DUPLICATES
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int i = 0;
        int j = nums.size()-1;

        while(i <= j){
            while(i<j && nums[i] == nums[i+1]) i++;
            while(i<j && nums[j] == nums[j-1]) j--; 

            if(target > nums[i]) i++;
            else if(target < nums[j]) j--;
            else if(target == nums[i]) return true;
            else if(target == nums[j]) return true;
            else return false;
        }
        return false;
    }
};
