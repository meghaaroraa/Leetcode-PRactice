https://leetcode.com/problems/find-the-duplicate-number/

APPROACH 1 : UNORDERED MAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_map<int,int> mp;
        int n = nums.size();

        for(int i=0; i<n; i++){
            mp[nums[i]]++;
            if(mp[nums[i]] == 2) return nums[i];
        }
        return -1;
    }
};

APPROACH 2 : SORTING
TIME COMPLEXITY = O(NLogN)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();

        for(int i=0; i<n-1; i++){
            if(nums[i] == nums[i+1]) return nums[i];
        }
        return -1;
    }
};
