https://leetcode.com/problems/maximum-product-of-three-numbers/

APPROACH 1 : SORTING
TIME COMPLEXITY = O(NLogN)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();

        int p1 = nums[0] * nums[1] * nums[n-1];
        int p2 = nums[n-3] * nums[n-2] * nums[n-1];

        return max(p1,p2);
    }
};

APPROACH 2 : ONE PASS
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int n = nums.size();

        int min1 = INT_MAX;
        int min2 = INT_MAX;

        int max1 = INT_MIN;
        int max2 = INT_MIN;
        int max3 = INT_MIN;

        for(int i=0; i<n; i++){
            int val = nums[i];

            if(val > max1){
                max3 = max2;
                max2 = max1;
                max1 = val;
            }

            else if(val > max2){
                max3 = max2;
                max2 = val;
            }

            else if(val > max3){
                max3 = val;
            }

            if(val < min1){
                min2 = min1;
                min1 = val;
            }

            else if(val < min2){
                min2 = val;
            }
        }

        return max(max1 * max2 * max3, min1 * min2 * max1);
    }
};
