https://leetcode.com/problems/number-of-equivalent-domino-pairs/

APPROACH : 2 LOOPS
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(1)
* GIVES TLE *

class Solution {
public:
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        int n = dominoes.size();
        int cnt = 0;

        for(int i=0; i<n; i++){
            int a = dominoes[i][0];
            int b = dominoes[i][1];

            for(int j=i+1; j<n; j++){
                int c = dominoes[j][0];
                int d = dominoes[j][1];

                if((a==c && b==d) || (a==d && b==c)) cnt++;
            }
        }
        return cnt;
    }
};

APPROACH 2 : 
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        map<pair<int,int>,int> mp;
        int cnt = 0;
        int n = dominoes.size();

        for(int i=0; i<n; i++){
            if(dominoes[i][0] > dominoes[i][1]) swap(dominoes[i][0],dominoes[i][1]);
            cnt += mp[make_pair(dominoes[i][0],dominoes[i][1])]++;
        }
        return cnt;
    }
};
