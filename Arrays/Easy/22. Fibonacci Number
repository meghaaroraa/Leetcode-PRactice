https://leetcode.com/problems/fibonacci-number/

APPROACH 1 : ITERATIVE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int fib(int n) {
        if(n<2) return n;

        int first = 0;
        int second = 1;

        for(int i=2; i<=n; i++){
            int temp = first + second;
            first = second;
            second = temp;
        }
        return second;
    }
};

APPROACH 2 : RECURSIVE
TIME COMPLEXITY = O(2^N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int fib(int n) {
        if(n==0 || n==1) return n;
        return fib(n-1) + fib(n-2);
    }
};
