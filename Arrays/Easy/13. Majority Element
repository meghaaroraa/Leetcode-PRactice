https://leetcode.com/problems/majority-element/description/

APPROACH 1 : SORTING
TIME COMPLEXITY = O(NLogN)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return nums[nums.size()/2];
    }
};

APPROACH 2 : BOYER-MOORE VOTING ALGORITHM
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int maj = nums[0];
        int cnt = 1;

        for(int i=1; i<nums.size(); i++){
            if(nums[i] == maj) cnt++;
            else cnt--;

            if(cnt == 0) maj = nums[i+1];
        }
        return maj;
    }
};
