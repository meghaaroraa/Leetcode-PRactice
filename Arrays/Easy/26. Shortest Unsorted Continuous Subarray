https://leetcode.com/problems/shortest-unsorted-continuous-subarray/description/

APPROACH : SORTING
TIME COMPLEXITY = O(NLogN)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        vector<int> arr = nums;
        sort(arr.begin(), arr.end());
        int n = nums.size();

        int start = n;
        int end = 0;

        for(int i=0; i<n; i++){
            if(nums[i] != arr[i]){
                start = min(start,i);
                end = max(end,i);
            }
        }
        if(end - start >= 0) return end - start + 1;
        else return 0;
    }
};
