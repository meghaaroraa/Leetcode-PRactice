https://leetcode.com/problems/third-maximum-number/

APPROACH 1 : SORTING
TIME COMPLEXITY = O(NLogN)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        sort(nums.begin(), nums.end(), greater<int>());

        int cnt = 1;
        int prev = nums[0];

        for(int i=1; i<nums.size(); i++){
            if(nums[i] != prev){
                cnt++;
                prev = nums[i];
            }

            if(cnt == 3) return nums[i];
        }
        return nums[0];
    }
};

APPROACH 2 : PRIORITY QUEUE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        priority_queue<int> pq;
        unordered_set<int> set(nums.begin(), nums.end());

        for(auto i : set) pq.push(i);
        if(pq.size() < 3) return pq.top();

        int cnt = 0;
        while(pq.size() && cnt != 2){
            cnt++;
            pq.pop();
        }
        return pq.top();
    }
};
