https://leetcode.com/problems/sort-array-by-parity/

APPROACH 1 : ONE PASS
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int i = 0;
        int j = 0;
        int n = nums.size();

        while(j<n){
            if(nums[j]%2 != 0) j++;
            else{
                swap(nums[i],nums[j]);
                i++;
                j++;
            }
        }
        return nums;
    }
};

APPROACH 2 : TWO PASS
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        vector<int> ans;
        int n = nums.size();

        for(int i=0; i<n; i++){
            if(nums[i]%2 == 0) ans.push_back(nums[i]);
        }

        for(int i=0; i<n; i++){
            if(nums[i]%2 != 0) ans.push_back(nums[i]);
        }
        return ans;
    }
};
