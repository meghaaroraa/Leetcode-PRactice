CONSTRAINT : CONSTANT EXTRA SPACE

APPROACH 1 : 2 LOOPS
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(1)
* GIVES TLE *

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int n = numbers.size();
        
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(numbers[i] + numbers[j] == target) return {i+1,j+1};
            }
        }

        return {};
    }
};

APPROACH 2 : BINARY SEARCH, 2 POINTERS
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int left = 0;
        int right = numbers.size() - 1;

        while(left < right){
            if(numbers[left] + numbers[right] == target) return{left+1, right+1};
            else if(numbers[left] + numbers[right] < target) left++;
            else right--;
        }

        return {};
    }
};
