https://leetcode.com/problems/fair-candy-swap/

APPROACH : UNORDERED SET
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    vector<int> fairCandySwap(vector<int>& aliceSizes, vector<int>& bobSizes) {
        int sumAlice = 0;
        int sumBob = 0;

        int n = aliceSizes.size();
        int m = bobSizes.size();

        for(int i=0; i<n; i++) sumAlice += aliceSizes[i];
        for(int i=0; i<m; i++) sumBob += bobSizes[i];

        int diff = (sumBob - sumAlice) / 2;

        unordered_set<int> s;

        for(int i=0; i<m; i++) s.insert(bobSizes[i]);

        for(int i=0; i<n; i++){
            if(s.count(aliceSizes[i] + diff)) return {aliceSizes[i], aliceSizes[i] + diff};
        }
        return {};
    }
};
