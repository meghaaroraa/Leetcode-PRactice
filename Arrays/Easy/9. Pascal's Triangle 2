https://leetcode.com/problems/pascals-triangle-ii/description/

APPROACH 1 : T(n2)S(n)
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> ans(rowIndex+1,1);

        for(int i=2; i<=rowIndex; i++){
            int prev = 1;
            for(int j=1; j<i; j++){
                int temp = prev + ans[j];
                prev = ans[j];
                ans[j] = temp;
            }
        }
        return ans;
    }
};

APPROACH 2 : T(n)S(n)
TIME COMPLEOXTY = O(N)
SPACE COMPLEXITY = ON)

class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> ans;
        int i = rowIndex;
        long long int val = 1;
        
        for(int j=0; j<i+1; j++){
            ans.push_back(val);
            val = val * (i-j) / (j+1);
        }
        return ans;
    }
};
