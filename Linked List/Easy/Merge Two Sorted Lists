https://leetcode.com/problems/merge-two-sorted-lists/

APPROACH 1: ITERATIVE
TIME COMPLEXITY = O(M+N)
SPACE COMPLEXITY = O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* ans = new ListNode(-1);
        ListNode* dummy = ans;

        while(list1 && list2){
            if(list1->val < list2->val){
                dummy->next = list1;
                list1 = list1->next;
                dummy = dummy->next;
            }
            else{
                dummy->next = list2;
                list2 = list2->next;
                dummy = dummy->next;
            }
        }

        while(list1){
            dummy->next = list1;
            list1 = list1->next;
            dummy = dummy->next;
        }

        while(list2){
            dummy->next = list2;
            list2 = list2->next;
            dummy = dummy->next;
        }

        return ans->next;
    }
};

APPROACH 2: RECURSIVE
TIME COMPLEXITY = O(M+N)
SPACE COMPLEXITY = O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(!list1) return list2;
        if(!list2) return list1;
        
        if(list1->val < list2->val){
            list1->next = mergeTwoLists(list1->next, list2);
            return list1;
        } 
        else{
            list2->next = mergeTwoLists(list1, list2->next);
            return list2;
        }
    }
};
