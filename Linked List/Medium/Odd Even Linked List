https://leetcode.com/problems/odd-even-linked-list/

APPROACH 1: USING EXTRA SPACE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        ListNode* odd = new ListNode(0);
        ListNode* even = new ListNode(0);

        ListNode* t1 = odd;
        ListNode* t2 = even;

        ListNode* temp = head;
        int idx = 1;

        while(temp){
            ListNode* nnode = new ListNode(temp->val);
            if(idx%2 != 0){
                t1->next = nnode;
                t1 = t1->next;
            }
            else{
                t2->next = nnode;
                t2 = t2->next;
            }
            temp = temp->next;
            idx++;
        }
        
        t1->next = even->next;
        return odd->next;
    }
};

APPROACH 2: NO EXTRA SPACE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(!head || !head->next) return head;
        
        ListNode* odd = head;
        ListNode* even = head->next;

        ListNode* evenHead = even;

        while(odd->next && even->next){
            odd->next = odd->next->next;
            odd = odd->next;

            even->next = even->next->next;
            even = even->next;
        }

        odd->next = evenHead;
        return head;
    }
};
