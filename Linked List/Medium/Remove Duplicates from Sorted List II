https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/

APPROACH: 
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode* prev = NULL;
        ListNode* curr = head;
        bool extra = false;

        while(curr) {
            if(curr->next && curr->val == curr->next->val) {
                curr = curr->next;
                extra = true;
            }
            else if(extra) {
                curr = curr->next;
                extra = false;
            }
            else {
                prev=curr;
                curr=curr->next;
            }
            if(prev) prev->next = curr;
            else head = curr;
        }
        return head;
    }
};
