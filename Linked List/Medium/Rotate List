https://leetcode.com/problems/rotate-list/

APPROACH: SLOW FAST POINTER
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head || !head->next) return head; 

        ListNode* slow = head;
        ListNode* fast = head;

        int len = 0;
        ListNode* temp = head;
        while(temp){
            temp = temp->next;
            len++;
        }

        k %= len;

        while(k--) fast = fast->next;

        while(fast->next){
            slow = slow->next;
            fast = fast->next;
        }

        fast->next = head;
        head = slow->next;
        slow->next = NULL;
        return head;
    }
};
