https://leetcode.com/problems/add-two-numbers-ii/

APPROACH: 
TIME COMPLEXITY = O(M+N)
SPACE COMPLEXITY = O(M+N)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode* prev = NULL;
        ListNode* temp;

        while(head){
            temp = head->next;
            head->next = prev;
            prev = head;
            head = temp;
        }
        return prev;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);

        int sum = 0;
        int carry = 0;
        ListNode* ans = new ListNode(0);

        while(l1 || l2){
            if(l1){
                sum += l1->val;
                l1 = l1->next;
            }

            if(l2){
                sum += l2->val;
                l2 = l2->next;
            }

            ans->val = sum%10;
            carry = sum / 10;

            ListNode* head = new ListNode(carry);
            head->next = ans;
            ans = head;
            sum = carry;
        }

        if(carry) return ans;
        else return ans->next;
    }
};
