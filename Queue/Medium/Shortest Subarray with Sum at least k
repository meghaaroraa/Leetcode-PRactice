https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/

APPROACH: DEQUE
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        long long int n = nums.size();
        long long int sum = 0;
        long long int ans = INT_MAX;
        deque<pair<long long int,long long int>> dq;

        for(long long int i=0; i<n; i++){
            sum += nums[i];
            if(sum >= k) ans = min(ans, i+1);

            while(!dq.empty() && sum - dq.front().second >= k){
                ans = min(ans, i - dq.front().first);
                dq.pop_front();
            }

            while(!dq.empty() && sum <= dq.back().second) dq.pop_back();
            dq.push_back({i,sum});
        }

        if(ans == INT_MAX) return -1;
        else return ans;
    }
};
