https://leetcode.com/problems/design-circular-deque/

APPROACH: ARRAYS

class MyCircularDeque {
public:
    int* arr;
    int n;
    int left;
    int right;

    MyCircularDeque(int k) {
        n = k;
        arr = new int[k];
        left = right = -1;    
    }
    
    bool insertFront(int value) {
        if(isFull()) return false;
        else if(isEmpty()) left = right = 0;
        else if(left == 0) left = n-1;
        else left--;
        arr[left] = value;
        return true;
    }
    
    bool insertLast(int value) {
        if(isFull()) return false;
        else if(isEmpty()) left = right = 0;
        else if(right == n-1) right = 0;
        else right++;
        arr[right] = value;
        return true;
    }
    
    bool deleteFront() {
        if(isEmpty()) return false;
        arr[left] = -1;
        if(left == right) left = right = -1;
        else if(left == n-1) left = 0;
        else left++;
        return true;
    }
    
    bool deleteLast() {
        if(isEmpty()) return false;
        arr[right] = -1;
        if(left == right) left = right = -1;
        else if(right == 0) right = n-1;
        else right--;
        return true;
    }
    
    int getFront() {
        if(isEmpty()) return -1;
        return arr[left];
    }
    
    int getRear() {
        if(isEmpty()) return -1;
        return arr[right];
    }
    
    bool isEmpty() {
        if(left == -1) return true;
        return false;
    }
    
    bool isFull() {
        if((left == 0 && right == n-1) || (right == (left-1)%(n-1) && left != 0)) return true;
        return false;   
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */
