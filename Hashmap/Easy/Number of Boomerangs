https://leetcode.com/problems/number-of-boomerangs/

APPROACH: MAP, PERMUTATIONS
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int numberOfBoomerangs(vector<vector<int>>& points) {
        int ans = 0;
        int n = points.size();

        for(int i=0; i<n; i++){
            map<int,int> mp;

            for(int j=0; j<n; j++){
                if(i != j){
                    int dis = (points[i][1]-points[j][1]) * (points[i][1]-points[j][1]) + (points[i][0]-points[j][0]) * (points[i][0]-points[j][0]);
                    mp[dis]++;
                }
            }

            for(auto i : mp){
                if(i.second >= 2) ans += ((i.second) * (i.second - 1));
            }
        }
        return ans;
    }
};
