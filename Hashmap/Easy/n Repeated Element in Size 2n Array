https://leetcode.com/problems/n-repeated-element-in-size-2n-array/
A
APPROACH 1: UNORDERED MAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int repeatedNTimes(vector<int>& nums) {
        unordered_map<int,int> mp;
        int n = nums.size() / 2;

        for(auto num : nums) mp[num]++;

        for(auto i : mp){
            if(i.second == n) return i.first;
        }
        return -1;
    }
};

APPROACH 2: SORTING
TIME COMPLEXITY = O(NLogN)
SPACE COMPLEXITY = O(LogN)

class Solution {
public:
    int repeatedNTimes(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size() / 2;
        
        if(nums[n] == nums[n+1]) return nums[n];
        return nums[n-1];
    }
};
