https://leetcode.com/problems/valid-anagram/

APPROACH 1: SORTING
TIME COMPLEXITY = O(NLogN)
SPACE COMPLEXITY = O(LogN)

class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        return s == t;
    }
};

APPROACH 2: HASHMAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    bool isAnagram(string s, string t) {
        int n = s.length();
        int m = t.length();

        if(n != m) return false;
        unordered_map<char, int> mp;

        for(int i=0; i<n; i++){
            mp[s[i]]++;
            mp[t[i]]--;
        }

        for(auto i : mp){
            if(i.second != 0) return false;
        }
        return true;
    }
};
