https://leetcode.com/problems/design-hashmap/

APPROACH 1: VARIABLE SIZE ARRAY
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(1)

class MyHashMap {
public:
    vector<pair<int,int>> mp;
    MyHashMap() {
        
    }
    
    void put(int key, int value) {
        int i = 0;
        while(i<mp.size()){
            if(mp[i].first == key){
                mp[i].second = value;
                break;
            }
            i++;
        }

        if(i == mp.size()) mp.push_back({key, value});
    }
    
    int get(int key) {
        for(int i=0; i<mp.size(); i++){
            if(mp[i].first == key) return mp[i].second;
        }
        return -1;
    }
    
    void remove(int key) {
        for(int i=0; i<mp.size(); i++){
            if(mp[i].first == key){
                mp.erase(mp.begin() + i);
                break;
            }
        }
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */

APPROACH 2: FIXED SIZE ARRAY
TIME COMPLEXITY = O(1)
SPACE COMPLEXITY = O(N)

class MyHashMap {
public:
    vector<int> mp;
    int size= 1e6+1;
    MyHashMap() {
        mp.resize(size,-1);
    }
    
    void put(int key, int value) {
        mp[key] = value;
    }
    
    int get(int key) {
        return mp[key];
    }
    
    void remove(int key) {
        mp[key] = -1;
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
