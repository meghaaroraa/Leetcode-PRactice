https://leetcode.com/problems/contiguous-array/

APPROACH 1: ALL SUBARRAYS
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(1)
* GIVES TLE *

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int len = 0;
        int n = nums.size();

        for(int i=0; i<n; i++){
            int zero = 0;
            int one = 0;

            for(int j=i; j<n; j++){
                if(nums[j] == 0) zero++;
                else one++;
                if(zero == one) len = max(len, j-i+1);
            }
        }
        return len;
    }
};

APPROACH 2: MAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        unordered_map<int,int> mp;
        mp[0] = -1;

        int len = 0;
        int cnt = 0;
        int n = nums.size();

        for(int i=0; i<n; i++){
            if(nums[i] == 1) cnt += 1;
            else cnt += -1;

            if(mp.find(cnt) != mp.end()) len = max(len, i-mp[cnt]);
            else mp[cnt] = i;
        }
        return len;
    }
};
