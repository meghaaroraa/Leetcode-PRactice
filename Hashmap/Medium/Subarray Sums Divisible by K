https://leetcode.com/problems/subarray-sums-divisible-by-k/

APPROACH 1: SUBARRAY
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(1)
* GIVES TLE *

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int cnt = 0;
        int n = nums.size();

        for(int i=0; i<n; i++){
            int sum = 0;

            for(int j=i; j<n; j++){
                sum += nums[j];
                if(sum % k == 0) cnt++;
            }
        }
        return cnt;
    }
};

APPROACH 2: MAP
TIME COMPLEXITY = O(N)
SPACE COMPLEXITY = O(N)

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int n = nums.size();
        int prefix = 0;
        int ans = 0;

        vector<int> group(k);
        group[0] = 1;

        for(int num : nums){
            prefix = (prefix + num%k + k) % k;
            ans += group[prefix];
            group[prefix]++;
        }
        return ans;
    }
};
