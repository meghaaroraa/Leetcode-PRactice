https://leetcode.com/problems/implement-magic-dictionary/

APPROACH: MAP
TIME COMPLEXITY = O(N^2)
SPACE COMPLEXITY = O(N)

class MagicDictionary {
public:
    unordered_map<int, vector<string>> mp;
    MagicDictionary() {
        
    }
    
    void buildDict(vector<string> dictionary) {
        for(string word : dictionary) mp[word.length()].push_back(word);
    }
    
    bool search(string searchWord) {
        if(mp.find(searchWord.length()) == mp.end()) return false;

        for(auto word : mp[searchWord.length()]){
            int mis = 0;
            for(int i=0; i<word.length(); i++){
                if(word[i] != searchWord[i]){
                    mis++;
                    if(mis > 1) break;
                }
            }
            if(mis == 1) return true;
        }
        return false;
    }
};

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary* obj = new MagicDictionary();
 * obj->buildDict(dictionary);
 * bool param_2 = obj->search(searchWord);
 */
